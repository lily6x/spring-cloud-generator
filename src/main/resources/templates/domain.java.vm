package ${customInfo.packageName};


import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${groupId}.infrastructure.common.ObjectConvert;
import ${groupId}.infrastructure.persistent.entity.${entity};
import ${groupId}.infrastructure.persistent.service.I${entity}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class ${entity}Domain extends ${entity}DM implements ${entity}DomainService{

    @Autowired
    I${entity}Service ${controllerMappingHyphen}Service;
    @Override
    public List<${entity}DM> getAll(${entity}DM ${controllerMappingHyphen}DM) {
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>(ObjectConvert.convert(${controllerMappingHyphen}DM,${entity}.class));
//        queryWrapper.eq("name","西施");
        List<${entity}> ${controllerMappingHyphen}List = ${controllerMappingHyphen}Service.list(queryWrapper);
        List<${entity}DM> domainList = new ArrayList<>();

        ${controllerMappingHyphen}List.forEach(obj -> {
            domainList.add(ObjectConvert.convert(obj,${entity}DM.class));
        });
        return domainList;
    }

    @Override
    public ${entity}DM add(${entity}DM ${controllerMappingHyphen}DM) {
        ${entity} ${controllerMappingHyphen} =  ObjectConvert.convert(${controllerMappingHyphen}DM, ${entity}.class);
        ${controllerMappingHyphen}Service.save(${controllerMappingHyphen});
        return ${controllerMappingHyphen}DM;
    }

    @Override
    public List<${entity}DM> page(${entity}DM ${controllerMappingHyphen}DM, Integer current, Integer size) {
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>(ObjectConvert.convert(${controllerMappingHyphen}DM,${entity}.class));
//        queryWrapper.eq("name","西施");
        Page<${entity}> page = new Page<>(current,size);
//        Page<${entity}> p = ${controllerMappingHyphen}Service.page(page,queryWrapper);
        List<${entity}> ${controllerMappingHyphen}List = ${controllerMappingHyphen}Service.page(page,queryWrapper).getRecords();
        List<${entity}DM> domainList = new ArrayList<>();
        ${controllerMappingHyphen}List.forEach(obj -> {
            domainList.add(ObjectConvert.convert(obj,${entity}DM.class));
        });
        return domainList;
    }

    @Override
    public ${entity}DM queryOne(${entity}DM ${controllerMappingHyphen}DM) {
        ${entity} ${controllerMappingHyphen} = ObjectConvert.convert(${controllerMappingHyphen}DM,${entity}.class);
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>(${controllerMappingHyphen});
        ${entity} res = ${controllerMappingHyphen}Service.getOne(queryWrapper);
        return ObjectConvert.convert(res, ${entity}DM.class);
    }

    @Override
    public ${entity}DM update(${entity}DM ${controllerMappingHyphen}DM) {
        ${entity} ${controllerMappingHyphen} =  ObjectConvert.convert(${controllerMappingHyphen}DM, ${entity}.class);
        ${controllerMappingHyphen}Service.updateById(${controllerMappingHyphen});
        return ${controllerMappingHyphen}DM;
    }

    @Override
    public ${entity}DM delete(${entity}DM ${controllerMappingHyphen}DM) {
        ${entity} ${controllerMappingHyphen} =  ObjectConvert.convert(${controllerMappingHyphen}DM, ${entity}.class);
        ${controllerMappingHyphen}Service.removeById(${controllerMappingHyphen});
        return ${controllerMappingHyphen}DM;
    }

}
